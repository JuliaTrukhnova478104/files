1.cpp

#include <stdio.h>
#include <locale.h>
#include "header.h"

extern int student_count;

int main() {
    setlocale(LC_ALL, "Rus");
    kol();
    int choice;
    do {
        printf("Сделайте выбор:\n");
        printf("1. Ввод информации о студентах\n");
        printf("2. Печать информации\n");
        printf("3. Поиск студента по году рождения\n");
        printf("4. Сортировка студентов\n");
        printf("5. Выход\n");
        choice = proverka();

        switch (choice) {
        case 1:
            enter();
            break;
        case 2:
            print();
            break;
        case 3: read();
            break;
        case 4:
            sort();
            break;
        case 5:
            return 0;
        default:
            printf("Неверный выбор! Попробуйте снова.\n");
        }
    } while (choice != 5);

    return 0;
}

2.cpp

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include<iostream>
#include <string.h>
#include <locale.h>
#include "header.h"

static Student students[10];
int student_count = 0;

extern int proverka()
{
    int c;
    int b = scanf_s("%d", &c);
    if ((b == 1) && (c <= 0))  b = 0;
    while (b != 1)
    {
        while (getchar() != '\n');
        printf("Пожалуйста, введите целое число\n");
        b = scanf_s("%d", &c);
        if (c < 0) b = 0;
    }
    return c;
}
extern float check()
{
    float c;
    float b = scanf_s("%f", &c);
    if ((b == 1) && ((c <= 0)||(c > 10)))  b = 0;
    while (b != 1)
    {
        while (getchar() != '\n');
        printf("Пожалуйста, введите число от 1 до 10\n");
        b = scanf_s("%f", &c);
        if (c < 0) b = 0;
    }
    return c;
}
extern void kol()
{
    FILE* f;
    if (fopen_s(&f, "f2.txt", "r") != 0)
    {
        printf("Ошибка открытия файла\n"); return;
    }
    fseek(f, 0, SEEK_SET);
    if (fscanf_s(f, "%d\n", &student_count) != 1)
        student_count = 0;
    fclose(f);
}
extern void enter() {
    setlocale(LC_ALL, "Rus");

    FILE* f;
    FILE* file = fopen("students.txt", "a+");
    if (file == NULL) {
        printf("Не удалось открыть файл для записи.\n");
        return;
    }
    printf("Сколько студентов Вы бы хотели ввести ? ");
A:  int number = proverka();
    student_count += number;
    if (student_count > 10)
    {
        student_count -= number;
        printf("Недостаточно места, введите число от 1 до %d\n", 10 - student_count);
        goto A;
    }
    if (fopen_s(&f, "f2.txt", "w") == 0)
    {
        fprintf(f, "%d", student_count);
        fclose(f);
    }
    else printf("Ошибка открытия файла\n");
    for (int i = 0; i < number; i++) {
        printf("\nСтудент %d:\n", i + 1);
        printf("Фамилия и инициалы: ");
        getchar();
        gets_s(students[i].name, 20);
        printf("Год рождения(1900-2009): ");
        students[i].birth_year = proverka();
        while ((students[i].birth_year < 1900) || (students[i].birth_year > 2020))
        {
            printf("Такого года нет\n");
            printf("Попробуйте ещё раз\n");
            students[i].birth_year = proverka();
        }

        printf("Год поступления(>= %d): ", students[i].birth_year + 16);
        students[i].entry_year = proverka();
        while (((students[i].entry_year < 1905) || (students[i].entry_year > 2025)) || (students[i].entry_year < (students[i].birth_year + 16)))
        {
            printf("Такого года нет\n");
            printf("Попробуйте ещё раз\n");
            students[i].birth_year = proverka();
        }

        printf("Оценка по физике: ");
        students[i].physics_grade = check();

        printf("Оценка по высшей математике: ");
        students[i].math_grade = check();

        printf("Оценка по информатике: ");
        students[i].informatics_grade = check();


        fprintf(file, "%s %s %d %d %.2f %.2f %.2f\n", students[i].name, students[i].initials, students[i].birth_year,
            students[i].entry_year, students[i].physics_grade, students[i].math_grade,
            students[i].informatics_grade);
    }

fclose(file);
printf("Данные студентов успешно записаны в файл.\n");
}


extern int print() {
    setlocale(LC_ALL, "Rus");
    if (kol == 0) {
        printf("Нет записей\n"); return 0;
    }
    FILE* file = fopen("students.txt", "r");
    if (file == NULL) {
        printf("Не удалось открыть файл для чтения.\n");
        return 0;
    }
    printf("\nСписок студентов:\n");
    printf("Фамилия и инициалы\tГод рождения\tГод поступления\tФизика\tМатематика  Информатика\n");
    printf("------------------------------------------------------------------------------------------\n");

    fseek(file, 0, SEEK_SET);
    int i = 0;
    printf("\r");
    while (fscanf_s(file, "\n%19s %4s %d %d %f %f %f", students[i].name, 20, students[i].initials, 5, &students[i].birth_year,
        &students[i].entry_year, &students[i].physics_grade,
        &students[i].math_grade, &students[i].informatics_grade) == 7) {
        printf("%12s %s\t%10d\t%10d\t %.2f\t  %.2f\t     %.2f\n",
            students[i].name, students[i].initials, students[i].birth_year, students[i].entry_year,
            students[i].physics_grade, students[i].math_grade, students[i].informatics_grade);
        i++;
    }
    fclose(file);
    printf("Данные студентов успешно загружены из файла.\n");
    return 1;
}


extern void read() {
    setlocale(LC_ALL, "Rus");
    int birth_year;
    printf("Введите год рождения студента для поиска(1900-2020): ");
    birth_year = proverka();
    while ((birth_year < 1900) || (birth_year > 2020))
    {
        printf("Такого года нет\n");
        printf("Попробуйте ещё раз\n");
        birth_year = proverka();
    }

    for (int i = 0; i < student_count; i++) {
        if (students[i].birth_year == birth_year) {
            printf("\nИнформация о студенте с годом рождения %d:\n", birth_year);
            printf("Фамилия и инициалы: %s %s\n", students[i].name, students[i].initials);
            printf("Год поступления:   %d\n", students[i].entry_year);
            printf("Оценка по физике: %.2f\n", students[i].physics_grade);
            printf("Оценка по высшей математике: %.2f\n", students[i].math_grade);
            printf("Оценка по информатике: %.2f\n", students[i].informatics_grade);
        }
    }
    printf("Студент с таким годом рождения не найден.\n");
}

extern void sort_by_birth_year() {
    if (print() == 0) return;
    Student mas[10];
    for (int k = 0; k < student_count; k++)
        mas[k] = students[k];
    for (int i = 0; i < student_count - 1; i++) {
        for (int j = i + 1; j < student_count; j++) {
            if (mas[i].birth_year > mas[j].birth_year) {
                Student temp = mas[i];
                mas[i] = mas[j];
                mas[j] = temp;
            }
        }
    } printf("Отсортированная таблица\n");
    printf("\nСписок студентов:\n");
    printf("Фамилия и инициалы\tГод рождения\tГод поступления\tФизика\tМатематика  Информатика\n");
    printf("------------------------------------------------------------------------------------------\n");

    for (int i = 0; i < student_count; i++) {
        printf("%12s %s\t%10d\t%10d\t %.2f\t  %.2f\t     %.2f\n",
            mas[i].name, students[i].initials, mas[i].birth_year, mas[i].entry_year,
            mas[i].physics_grade, mas[i].math_grade, mas[i].informatics_grade);
    }
}

extern void sort_by_entry_year() {
    if (print() == 0) return;
    Student mas[10];
    for (int k = 0; k < student_count; k++)
        mas[k] = students[k];
    for (int i = 0; i < student_count - 1; i++) {
        for (int j = i + 1; j < student_count; j++) {
            if (mas[i].entry_year > mas[j].entry_year) {
                Student temp = mas[i];
                mas[i] = mas[j];
                mas[j] = temp;
            }
        }
    }
    printf("Отсортированная таблица\n");
    printf("\nСписок студентов:\n");
    printf("Фамилия и инициалы\tГод рождения\tГод поступления\tФизика\tМатематика  Информатика\n");
    printf("------------------------------------------------------------------------------------------\n");

    for (int i = 0; i < student_count; i++) {
        printf("%12s %s\t%10d\t%10d\t %.2f\t  %.2f\t     %.2f\n",
            mas[i].name, students[i].initials, mas[i].birth_year, mas[i].entry_year,
            mas[i].physics_grade, mas[i].math_grade, mas[i].informatics_grade);
    }
}
extern void sort_by_name() {
    if (print() == 0) return;
    Student mas[10];
    for (int k = 0; k < student_count; k++)
        mas[k] = students[k];
    for (int i = 0; i < student_count - 1; i++) {
        for (int j = i + 1; j < student_count; j++) {
            if (strcmp(mas[i].name, mas[j].name) > 0) {
                Student temp = mas[i];
                mas[i] = mas[j];
                mas[j] = temp;
            }
        }
    } printf("Отсортированная таблица\n");
    printf("\nСписок студентов:\n");
    printf("Фамилия и инициалы\tГод рождения\tГод поступления\tФизика\tМатематика  Информатика\n");
    printf("------------------------------------------------------------------------------------------\n");

    for (int i = 0; i < student_count; i++) {
        printf("%12s %s\t%10d\t%10d\t %.2f\t  %.2f\t     %.2f\n",
            mas[i].name, students[i].initials, mas[i].birth_year, mas[i].entry_year,
            mas[i].physics_grade, mas[i].math_grade, mas[i].informatics_grade);
    }
}

extern void sort() {
    if (student_count == 0) {
        printf("Нет записей\n"); return;
    }
    int choice;
    do {
        printf("\nВыберите критерий сортировки:\n");
        printf("1. Сортировка по году рождения\n");
        printf("2. Сортировка по году поступления\n");
        printf("3. Сортировка по фамилии\n");
        printf("4. Выход\n");

        choice = proverka();

        switch (choice) {
        case 1: sort_by_birth_year(); break;
        case 2: sort_by_entry_year(); break;
        case 3: sort_by_name(); break;
        case 4: return;
        default: printf("Некорректный выбор.\n");
        }

    } while (choice != 4);
}

header.h

#pragma once
typedef struct {
    char name[20];
    char initials[5];
    int birth_year;
    int entry_year;
    float physics_grade;
    float math_grade;
    float informatics_grade;
} Student;

extern void kol();
extern int proverka();
extern float check();
extern void enter();
extern int print();
extern void read();
extern void sort_by_birth_year();
extern void sort_by_entry_year();
extern void sort_by_name();
extern void sort();
